#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
private:
    int num_nodes;
    vector<vector<int>> adj_list;

public:
    Graph(int num_nodes) : num_nodes(num_nodes), adj_list(num_nodes) {}

    void addEdge(int src, int dest) {
        adj_list[src].push_back(dest);
        adj_list[dest].push_back(src);
    }

    void parallelBFS(int start_node) {
        vector<bool> visited(num_nodes, false);
        queue<int> q;

        #pragma omp parallel
        {
            #pragma omp single
            {
                q.push(start_node);
                visited[start_node] = true;
            }

            while (!q.empty()) {
                int node;
                #pragma omp critical
                {
                    node = q.front();
                    q.pop();
                }

                cout << node << " ";

                for (int neighbor : adj_list[node]) {
                    if (!visited[neighbor]) {
                        #pragma omp critical
                        {
                            q.push(neighbor);
                            visited[neighbor] = true;
                        }
                    }
                }
            }
        }
    }

    void parallelDFS(int start_node) {
        vector<bool> visited(num_nodes, false);
        stack<int> s;

        #pragma omp parallel
        {
            #pragma omp single
            {
                s.push(start_node);
            }

            while (!s.empty()) {
                int node;
                #pragma omp critical
                {
                    node = s.top();
                    s.pop();
                }

                if (!visited[node]) {
                    #pragma omp critical
                    {
                        visited[node] = true;
                    }

                    cout << node << " ";

                    for (int neighbor : adj_list[node]) {
                        if (!visited[neighbor]) {
                            #pragma omp critical
                            {
                                s.push(neighbor);
                            }
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int num_nodes = 7;
    Graph graph(num_nodes);

    // Adding edges to the graph
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);

    // Perform parallel BFS and DFS
    cout << "Parallel BFS traversal: ";
    graph.parallelBFS(0);
    cout << endl;

    cout << "Parallel DFS traversal: ";
    graph.parallelDFS(0);
    cout << endl;

    return 0;
}
